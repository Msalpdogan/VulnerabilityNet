using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace vulnerability.EngineUrl
{
    public class EngineUrl 
    {
        string _url;
        string _root;
        public EngineUrl(string url,string root)
        {
            this._url = url;
            this._root = root;
        }
        List<string> urlList = new List<string>();
       
        public void GetReq ()
        {
            using (var client = new HttpClient())
            {
                var url = _url;
                var response = client.GetAsync(url).Result;

                if (response.IsSuccessStatusCode)
                {
                    AccessForm accss = new AccessForm(new Form1());
                    var responseContent = response.Content;
                    string responseString = responseContent.ReadAsStringAsync().Result;
                    accss.Set_listBoxAllProccess(responseString);
                    UrlFinder(responseString);
                   
                }
            }
        }
        private void UrlFinder(string Content)
        {
            string startString= "href="+ '\u0022';
            string endString = '\u0022'.ToString();
            Form1 form = new Form1();
            int indexStart = 0, indexEnd = 0;
            bool exit = false;
            while (!exit)
            {
                indexStart = Content.IndexOf(startString);
                Content = Content.Substring(indexStart + 7 );
                indexStart = 0;
                indexEnd = Content.IndexOf(endString);
                if (indexStart != -1 && indexEnd != -1)
                {
                    string tempurl =null;

                    if ((indexEnd-1)> indexEnd - indexStart)
                    {
                        tempurl = Content.Substring(indexStart-1 , indexEnd - indexStart );
                    }
                    
                    if (UrlValidation(tempurl) ==true && tempurl != null )
                    {
                        UrlList list = new UrlList();
                        urlList.Add(tempurl);
                        list.urllist = urlList;
                        Console.WriteLine(tempurl+ "//////////////// \n");
                    }
                    
                    Content = Content.Substring(indexEnd + endString.Length);
                }
                else
                    exit = true;
            }
        }
        private bool UrlValidation(string Url)
        {
            /*
              bool condi = false;
              if (urlList.Count == 0 || urlList.Contains(Url.ToString())==false)
              {
                  condi = true;
              }

              if ((Url.Substring(0,1)=="/" || Url.Substring(0, _root.Length) == _root)  && condi)
              {
                  return true;
              }
              else
              {
                return  false;
              }
              */
            return true;
        }

    }
}
